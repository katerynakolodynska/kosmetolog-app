import { Booking } from "../db/models/booking.js";
import { Specialist } from "../db/models/specialist.js";
import { twilioClient } from "../utils/twilioClient.js";
import { getEnvVar } from "../utils/getEnvVar.js";
import mongoose from "mongoose";
import { Service } from "../db/models/service.js";
import { bookingSchema } from "../validation/bookingSchema.js";
import { TelegramUser } from "../db/models/telegramUser.js";
import { bot } from "../utils/telegramBot.js";

export const getAllBooking = async (req, res) => {
  try {
    const bookings = await Booking.find()
      .populate("specialistId", "name")
      .sort({ date: 1, time: 1 });

    res.json(bookings);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

export const createBooking = async (req, res) => {
  try {
    console.log("üì• –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É:", req.body);

    const { error, value } = bookingSchema.validate(req.body);
    if (error) {
      console.log("‚ùå –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:", error.details[0].message);
      return res.status(400).json({ message: error.details[0].message });
    }

    const { name, phone, service, date, time, comment, specialistId } = value;
    const cleanPhone = phone.replace(/\D/g, ""); // –æ—á–∏—â–µ–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–∏–ø—É 48690682583

    const serviceData = await Service.findById(service);
    if (!serviceData) {
      console.log("‚ùå –ü–æ—Å–ª—É–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ");
      return res.status(400).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∞ –ø–æ—Å–ª—É–≥–∞" });
    }

    const query = { date, time };
    if (specialistId) {
      query.specialistId = new mongoose.Types.ObjectId(specialistId);
    }

    const alreadyExists = await Booking.findOne(query);
    if (alreadyExists) {
      console.log("‚ö†Ô∏è –û–±—Ä–∞–Ω–∏–π —Å–ª–æ—Ç –∑–∞–π–Ω—è—Ç–∏–π:", query);
      return res
        .status(409)
        .json({ message: "Wybrany termin jest ju≈º zajƒôty." });
    }

    let finalSpecialistId = specialistId;
    if (!finalSpecialistId) {
      const candidates = await Specialist.find({
        categories: serviceData.category,
        isActive: true,
      });

      const bookings = await Booking.find({ date, time });
      const busyIds = bookings.map((b) => String(b.specialistId));
      const available = candidates.find(
        (s) => !busyIds.includes(String(s._id))
      );

      if (!available) {
        console.log("‚ùå –ù–µ–º–∞—î –≤—ñ–ª—å–Ω–æ–≥–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞");
        return res.status(400).json({ message: "Brak dostƒôpnego specjalisty" });
      }

      finalSpecialistId = available._id;
    }

    const newBooking = await Booking.create({
      name,
      phone: cleanPhone, // <=== –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —î–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
      service,
      date,
      time,
      comment,
      specialistId: finalSpecialistId,
    });

    console.log("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å:", newBooking);

    const telegramUser = await TelegramUser.findOne({ phone: cleanPhone });
    const message = `‚úÖ –ü—Ä–∏–≤—ñ—Ç, ${name}!\n–í–∞—à–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ '${serviceData.title.pl}' –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.\nüóì ${date}, üïí ${time}`;

    if (telegramUser?.chatId) {
      try {
        await bot.sendMessage(telegramUser.chatId, message);
        console.log("üì§ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram.");
      } catch (err) {
        console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", err.message);
      }
    } else {
      console.log("‚ÑπÔ∏è TelegramUser –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –∞–±–æ –±–µ–∑ chatId");
    }

    const e164 = `+${cleanPhone}`;
    try {
      await twilioClient.messages.create({
        body: `Witaj, ${name}! Twoja rezerwacja na '${serviceData.title.pl}' zosta≈Ça przyjƒôta na ${date} o ${time}.`,
        from: getEnvVar("TWILIO_PHONE_NUMBER"),
        to: e164,
      });
      console.log("üì§ SMS –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞:", e164);
    } catch (err) {
      console.error("‚ùå SMS –ø–æ–º–∏–ª–∫–∞:", err.message);
    }

    return res.status(201).json(newBooking);
  } catch (err) {
    console.error("‚ùå Booking error:", err.message);
    return res.status(500).json({ message: err.message });
  }
};

export const updateBooking = async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    const updated = await Booking.findByIdAndUpdate(id, updateData, {
      new: true,
    }).populate("specialistId", "name");

    if (!updated) {
      return res.status(404).json({ message: "Booking not found" });
    }

    res.json(updated);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

export const deleteBooking = async (req, res) => {
  try {
    const { id } = req.params;
    await Booking.findByIdAndDelete(id);
    res.status(204).send();
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

export const getBusyTimes = async (req, res) => {
  const { date } = req.query;
  if (!date) return res.status(400).json({ message: "Missing date" });

  try {
    const bookings = await Booking.find({ date }).select(
      "date time specialistId"
    );
    res.json(bookings);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
