import { Notification } from "../db/models/notification.js";
import { NotificationSubscriber } from "../db/models/notificationSubscriber.js";
import { bot } from "../utils/telegramBot.js";
import axios from "axios";
import dotenv from "dotenv";
dotenv.config();

// üëâ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
export const createNotification = async (req, res) => {
  try {
    const { title, text } = req.body;

    if (!title || !text) {
      return res.status(400).json({ message: "Title —ñ text –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ" });
    }

    const notification = await Notification.create({ title, text });
    res.status(201).json(notification);
  } catch (e) {
    res
      .status(500)
      .json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ", error: e.message });
  }
};

// üëâ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥–ª—è –∞–¥–º—ñ–Ω–∫–∏)
export const getAllNotifications = async (req, res) => {
  try {
    const notifications = await Notification.find().sort({ createdAt: -1 });
    res.json(notifications);
  } catch (e) {
    res
      .status(500)
      .json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ", error: e.message });
  }
};

// üëâ –ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞
export const sendNotification = async (req, res) => {
  const { id } = req.params;
  const notification = await Notification.findById(id);

  if (!notification)
    return res.status(404).json({ message: "Notification not found" });

  // üîÑ –í—Å—ñ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ (Telegram + WebPush)
  const subscribers = await NotificationSubscriber.find();

  // === 1. Telegram
  for (const user of subscribers) {
    if (!user.chatId) continue;

    try {
      await bot.sendMessage(
        user.chatId,
        `üì¢ *${notification.title}*\n\n${notification.text}`,
        { parse_mode: "Markdown" }
      );
    } catch (e) {
      console.log(`‚ùå Telegram –ø–æ–º–∏–ª–∫–∞ –¥–ª—è ${user.chatId}:`, e.message);
    }
  }

  // === 2. WebPush (OneSignal)
  const playerIds = subscribers.map((user) => user.playerId).filter(Boolean);

  if (playerIds.length > 0) {
    try {
      await axios.post(
        "https://onesignal.com/api/v1/notifications",
        {
          app_id: process.env.ONESIGNAL_APP_ID,
          include_player_ids: playerIds,
          headings: { pl: notification.title, uk: notification.title },
          contents: { pl: notification.text, uk: notification.text },
        },
        {
          headers: {
            Authorization: `Basic ${process.env.ONESIGNAL_API_KEY}`,
            "Content-Type": "application/json",
          },
        }
      );
    } catch (e) {
      console.log("‚ùå WebPush –ø–æ–º–∏–ª–∫–∞:", e.message);
    }
  }

  // ‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ
  notification.sent = true;
  await notification.save();

  res.json({ message: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram —ñ WebPush." });
};
