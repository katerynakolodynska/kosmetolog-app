import { Notification } from "../db/models/notification.js";
import { NotificationSubscriber } from "../db/models/notificationSubscriber.js";
import { bot } from "../utils/telegramBot.js";

// üëâ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
export const createNotification = async (req, res) => {
  try {
    const { title, text } = req.body;

    if (!title || !text) {
      return res.status(400).json({ message: "Title —ñ text –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ" });
    }

    const notification = await Notification.create({ title, text });
    res.status(201).json(notification);
  } catch (e) {
    res
      .status(500)
      .json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ", error: e.message });
  }
};

// üëâ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥–ª—è –∞–¥–º—ñ–Ω–∫–∏)
export const getAllNotifications = async (req, res) => {
  try {
    const notifications = await Notification.find().sort({ createdAt: -1 });
    res.json(notifications);
  } catch (e) {
    res
      .status(500)
      .json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ", error: e.message });
  }
};

// üëâ –ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ Telegram
export const sendNotification = async (req, res) => {
  try {
    const { id } = req.params;
    const notification = await Notification.findById(id);

    if (!notification)
      return res.status(404).json({ message: "Notification not found" });

    const subscribers = await NotificationSubscriber.find({
      chatId: { $exists: true, $ne: null },
    });

    for (const user of subscribers) {
      try {
        await bot.sendMessage(
          user.chatId,
          `üì¢ *${notification.title}*\n\n${notification.text}`,
          { parse_mode: "Markdown" }
        );
      } catch (e) {
        console.log(`‚ùå Telegram –ø–æ–º–∏–ª–∫–∞ –¥–ª—è ${user.chatId}:`, e.message);
      }
    }

    notification.sent = true;
    await notification.save();

    res.json({ message: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ Telegram." });
  } catch (err) {
    res
      .status(500)
      .json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª—Ü—ñ", error: err.message });
  }
};
