import TelegramBot from "node-telegram-bot-api";
import dotenv from "dotenv";
dotenv.config();

export const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
  polling: true,
});

import { TelegramUser } from "../db/models/telegramUser.js";
import { Booking } from "../db/models/booking.js";

// /start
bot.onText(/\/start(?:\s+(.+))?/, async (msg, match) => {
  const chatId = String(msg.chat.id);
  const username = await TelegramUser.findOne({ chatId });

  const rawPhone = match[1] || "";
  const phone = user?.phone?.replace(/\D/g, "");

  const existing = await TelegramUser.findOne({ chatId });
  const isFirstTime = !existing?.phone && phone;

  await TelegramUser.updateOne(
    { chatId },
    { chatId, username, ...(phone && { phone }) },
    { upsert: true }
  );

  if (isFirstTime) {
    return bot.sendMessage(
      chatId,
      `üëã –í—ñ—Ç–∞—é, ${
        username || "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
      }!\n–í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n–ö–æ–º–∞–Ω–¥–∏:\n/my ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å–∏\n/unsubscribe ‚Äî –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è`
    );
  }
});

// /my
bot.onText(/\/my/, async (msg) => {
  const chatId = String(msg.chat.id);
  const user = await TelegramUser.findOne({ chatId });

  if (!user?.phone) {
    return bot.sendMessage(
      chatId,
      "‚ùóÔ∏è–í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –ø–æ –ª—ñ–Ω–∫—É –∑ —Å–∞–π—Ç—É."
    );
  }

  const cleanPhone = user.phone.replace(/\D/g, ""); // –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω

  const bookings = await Booking.find({ phone: cleanPhone })
    .sort({ date: -1, time: -1 })
    .limit(10)
    .populate("service");

  if (!bookings.length) {
    return bot.sendMessage(chatId, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤.");
  }

  const msgText = bookings
    .map((b) => {
      const title = b.service?.title?.pl || "–ü–æ—Å–ª—É–≥–∞";
      return `üìÖ ${b.date} ${b.time}\nüíÖ ${title}`;
    })
    .join("\n\n");

  return bot.sendMessage(chatId, `üìã –í–∞—à—ñ –∑–∞–ø–∏—Å–∏:\n\n${msgText}`);
});

// /unsubscribe
bot.onText(/\/unsubscribe/, async (msg) => {
  const chatId = String(msg.chat.id);
  await TelegramUser.deleteOne({ chatId });
  return bot.sendMessage(chatId, "‚ùå –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å.");
});
