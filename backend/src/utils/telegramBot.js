import TelegramBot from "node-telegram-bot-api";
import dotenv from "dotenv";
dotenv.config();

export const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
  polling: true,
});

import { TelegramUser } from "../db/models/telegramUser.js";
import { Booking } from "../db/models/booking.js";

// /start ‚Äî –∑–∞–ø—Ä–æ—à—É—î –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;

  const existing = await TelegramUser.findOne({ chatId });
  if (existing?.phone) {
    return bot.sendMessage(chatId, "‚úÖ –í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ.");
  }

  const opts = {
    reply_markup: {
      keyboard: [[{ text: "üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact: true }]],
      one_time_keyboard: true,
      resize_keyboard: true,
    },
  };

  bot.sendMessage(
    chatId,
    "üëã –©–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
    opts
  );
});

// –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥—ñ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
bot.on("contact", async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username || "";
  const phone = msg.contact.phone_number.replace(/\D/g, ""); // –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏

  await TelegramUser.updateOne(
    { chatId },
    { chatId, phone, username },
    { upsert: true }
  );

  bot.sendMessage(
    chatId,
    `‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ Telegram-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.

–ö–æ–º–∞–Ω–¥–∏:
üóÇ /my ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å–∏
‚ùå /unsubscribe ‚Äî –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è`
  );
});

// /my ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–ø–∏—Å–∏
bot.onText(/\/my/, async (msg) => {
  const chatId = msg.chat.id;
  const user = await TelegramUser.findOne({ chatId });

  if (!user?.phone) {
    return bot.sendMessage(
      chatId,
      "‚ùóÔ∏è–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ /start."
    );
  }

  const bookings = await Booking.find({ phone: user.phone })
    .sort({ date: -1, time: -1 })
    .limit(10)
    .populate("service");

  if (!bookings.length) {
    return bot.sendMessage(chatId, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤.");
  }

  const msgText = bookings
    .map((b) => {
      const title = b.service?.title?.pl || "–ü–æ—Å–ª—É–≥–∞";
      return `üìÖ ${b.date} ${b.time}\nüíÖ ${title}`;
    })
    .join("\n\n");

  return bot.sendMessage(chatId, `üìã –í–∞—à—ñ –∑–∞–ø–∏—Å–∏:\n\n${msgText}`);
});

// /unsubscribe ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏
bot.onText(/\/unsubscribe/, async (msg) => {
  const chatId = msg.chat.id;
  await TelegramUser.deleteOne({ chatId });
  return bot.sendMessage(chatId, "‚ùå –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å.");
});
