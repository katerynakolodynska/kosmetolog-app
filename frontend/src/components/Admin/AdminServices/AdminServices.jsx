import { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { getAllServices, deleteService } from '../../../redux/services/servicesOperations';
import { getAllSpecialists } from '../../../redux/specialists/specialistsOperations';
import { selectServices } from '../../../redux/services/servicesSelectors';
import ServiceForm from '../ServiceForm/ServiceForm';
import s from './AdminServices.module.css';

const categories = ['all', 'cleaning', 'massage', 'injection'];

const AdminServices = () => {
  const dispatch = useDispatch();
  const services = useSelector(selectServices);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [serviceToEdit, setServiceToEdit] = useState(null);
  const [specialists, setSpecialists] = useState([]);

  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedSpecialist, setSelectedSpecialist] = useState('all');

  useEffect(() => {
    dispatch(getAllServices());
    dispatch(getAllSpecialists()).unwrap().then(setSpecialists).catch(console.error);
  }, [dispatch]);

  const handleAddNew = () => {
    setServiceToEdit(null);
    setIsFormOpen(true);
  };

  const handleEdit = (service) => {
    setServiceToEdit(service);
    setIsFormOpen(true);
  };

  const handleDelete = async (id) => {
    if (window.confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É?')) {
      await dispatch(deleteService(id));
      await dispatch(getAllServices()); // üü¢ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    }
  };

  const handleFormClose = async () => {
    setIsFormOpen(false);
    setServiceToEdit(null);
    await dispatch(getAllServices()); // üü¢ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è/—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
  };

  // üîé –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
  const filteredServices = services.filter((service) => {
    const byCategory = selectedCategory === 'all' || service.category === selectedCategory;
    const bySpecialist =
      selectedSpecialist === 'all' ||
      (Array.isArray(service.specialists) && service.specialists.some((s) => s?._id === selectedSpecialist));
    return byCategory && bySpecialist;
  });

  return (
    <div className={s.container}>
      <h1 className={s.title}>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ—Å–ª—É–≥–∞–º–∏</h1>

      <div className={s.filters}>
        <select value={selectedCategory} onChange={(e) => setSelectedCategory(e.target.value)}>
          <option value="all">–£—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</option>
          {categories
            .filter((cat) => cat !== 'all')
            .map((cat) => (
              <option key={cat} value={cat}>
                {cat}
              </option>
            ))}
        </select>

        <select value={selectedSpecialist} onChange={(e) => setSelectedSpecialist(e.target.value)}>
          <option value="all">–£—Å—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏</option>
          {specialists.map((spec) => (
            <option key={spec._id} value={spec._id}>
              {spec.name}
            </option>
          ))}
        </select>

        <button onClick={handleAddNew} className={s.addBtn}>
          + –î–æ–¥–∞—Ç–∏ –ø–æ—Å–ª—É–≥—É
        </button>
      </div>

      {isFormOpen && (
        <div className={s.formOverlay} onClick={handleFormClose}>
          <div className={s.formWrapper} onClick={(e) => e.stopPropagation()}>
            <button className={s.closeBtn} onClick={handleFormClose}>
              √ó
            </button>
            <ServiceForm onClose={handleFormClose} onSaveSuccess={handleFormClose} serviceToEdit={serviceToEdit} />
          </div>
        </div>
      )}

      <ul className={s.list}>
        {filteredServices.map((service) => (
          <li key={service._id} className={s.card}>
            <h3>{service.title?.pl}</h3>
            <p>
              <strong>–û–ø–∏—Å:</strong> {service.description?.pl}
            </p>
            <p>
              <strong>–¶—ñ–Ω–∞:</strong> {service.price} z≈Ç
            </p>
            <p>
              <strong>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</strong> {service.duration} —Ö–≤
            </p>
            <p>
              <strong>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</strong> {service.category || '‚Äî'}
            </p>
            <p>
              <strong>–°–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏:</strong>{' '}
              {Array.isArray(service.specialists) && service.specialists.length > 0
                ? service.specialists
                    .map((s) => s?.name)
                    .filter(Boolean)
                    .join(', ')
                : '‚Äî'}
            </p>

            <div className={s.actions}>
              <button onClick={() => handleEdit(service)}>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
              <button onClick={() => handleDelete(service._id)}>–í–∏–¥–∞–ª–∏—Ç–∏</button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default AdminServices;
